---
import { ClientRouter } from 'astro:transitions'
import '@/reset.css'
import '@/global.scss'
import '@/theme.scss'
const title = Astro.props.frontmatter?.title || Astro.props.title
const description = Astro.props.frontmatter?.description || Astro.props.description
const type = Astro.props.frontmatter?.description || Astro.props.type || 'website'
---

<!doctype html>
<html lang="en" theme="crtgreen" class="smooth-disabled">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="shortcut icon" type="image/png" href="/favicon.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/appicon.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap" rel="stylesheet">
    <meta property="og:image" content="/opengraph.png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:title" content={title} />
    <meta property="og:locale" content="en_US" />
    <meta property="og:type" content={type} />
    <meta property="og:description" content={description} />
    <title>{title}</title>
    <ClientRouter />
  </head>
  <body>
    <main aria-label="Content">
      <slot />
    </main>
    <script>
      //const themes = ['cat', 'candy', 'vibrant', 'catdark', 'catalt', 'test']
      //const themes = ['lazerwave','solarized', 'radical', 'cat']
      const themes = ['crtgreen', 'paddy', 'cat']

      document.addEventListener('keydown', function(event) {
        if (event.key === 't') {
          let theme = document.querySelector('html').getAttribute('theme')
          const themeIndex = themes.indexOf(theme)
          const nextTheme = themes[(themeIndex + 1) % themes.length]
          document.querySelector('html').setAttribute('theme', nextTheme)
        }
      })
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Backspace' || event.key === 'Escape') {
          window.history.back()
        }
      })
      // document.addEventListener('selectionchange', () => {
      //   const selection = document.getSelection()
      //   const className = document.documentElement.className.replaceAll(' selecting', '')
      //   if (selection && selection.toString().length > 0) {
      //     document.documentElement.className = className + ' selecting'
      //   } else {
      //     document.documentElement.className = className
      //   }
      // })
    </script>
  </body>
</html>